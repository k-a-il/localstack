name: AWS / Integration Tests

on:
  workflow_dispatch:
    inputs:
      disableCaching:
        description: 'Disable Caching'
        required: false
        type: boolean
        default: false
      PYTEST_LOGLEVEL:
        type: choice
        description: Loglevel for PyTest
        options:
          - DEBUG
          - INFO
          - WARNING
          - ERROR
          - CRITICAL
        default: WARNING
      disableTestSelection:
        description: 'Disable Test Selection'
        required: false
        type: boolean
        default: false
      randomize-aws-credentials:
        description: 'Randomize AWS credentials'
        default: false
        required: false
        type: boolean
      onlyAcceptanceTests:
        description: 'Run only acceptance tests'
        default: false
        required: false
        type: boolean
      forceARMTests:
        description: 'Run the ARM64 tests'
        default: false
        required: false
        type: boolean
      testAWSRegion:
        description: 'AWS test region'
        required: false
        type: string
        default: 'us-east-1'
      testAWSAccountId:
        description: 'AWS test account ID'
        required: false
        type: string
        default: '000000000000'
      testAWSAccessKeyId:
        description: 'AWS test access key ID'
        required: false
        type: string
        default: 'test'
  workflow_call:
    inputs:
      disableCaching:
        description: 'Disable Caching'
        required: false
        type: boolean
        default: false
      PYTEST_LOGLEVEL:
        type: string
        required: false
        description: Loglevel for PyTest
        default: WARNING
      disableTestSelection:
        description: 'Disable Test Selection'
        required: false
        type: boolean
        default: false
      randomize-aws-credentials:
        description: "Randomize AWS credentials"
        default: false
        required: false
        type: boolean
      onlyAcceptanceTests:
        description: "Run only acceptance tests"
        default: false
        required: false
        type: boolean
      forceARMTests:
        description: 'Run the ARM64 tests'
        default: false
        required: false
        type: boolean
      testAWSRegion:
        description: 'AWS test region'
        required: false
        type: string
        default: 'us-east-1'
      testAWSAccountId:
        description: 'AWS test account ID'
        required: false
        type: string
        default: '000000000000'
      testAWSAccessKeyId:
        description: 'AWS test access key ID'
        required: false
        type: string
        default: 'test'
    secrets:
      DOCKERHUB_PULL_USERNAME:
        description: 'A DockerHub username - Used to avoid rate limiting issues.'
        required: true
      DOCKERHUB_PULL_TOKEN:
        description: 'A DockerHub token - Used to avoid rate limiting issues.'
        required: true
      TINYBIRD_CI_TOKEN:
        description: 'Token for accessing our tinybird ci analytics workspace.'
        required: true

env:
  PYTEST_LOGLEVEL: ${{ inputs.PYTEST_LOGLEVEL || 'WARNING' }}
  IMAGE_NAME: "localstack/localstack"
  TESTSELECTION_PYTEST_ARGS: "${{ !inputs.disableTestSelection && '--path-filter=dist/testselection/test-selection.txt ' || '' }}"
  TEST_AWS_REGION_NAME: ${{ inputs.testAWSRegion }}
  TEST_AWS_ACCOUNT_ID: ${{ inputs.testAWSAccountId }}
  TEST_AWS_ACCESS_KEY_ID: ${{ inputs.testAWSAccessKeyId }}
  # Set non-job-specific environment variables for pytest-tinybird
  TINYBIRD_URL: https://api.tinybird.co
  TINYBIRD_DATASOURCE: raw_tests
  TINYBIRD_TOKEN: ${{ secrets.TINYBIRD_CI_TOKEN }}
  TINYBIRD_TIMEOUT: 5
  CI_REPOSITORY_NAME: localstack/localstack
  # differentiate between "acceptance", "mamr" and "full" runs
  CI_WORKFLOW_NAME: ${{ inputs.onlyAcceptanceTests && 'tests_acceptance'
    || inputs.testAWSAccountId != '000000000000' && 'tests_mamr'
    || 'tests_full' }}
  CI_COMMIT_BRANCH: ${{ github.head_ref || github.ref_name }}
  CI_COMMIT_SHA: ${{ github.sha }}
  CI_JOB_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }}
  # report to tinybird if executed on master
  TINYBIRD_PYTEST_ARGS: "${{ github.repository == 'localstack/localstack' && github.ref == 'refs/heads/master' && '--report-to-tinybird ' || '' }}"
  DOCKER_PULL_SECRET_AVAILABLE: ${{ secrets.DOCKERHUB_PULL_USERNAME != '' && secrets.DOCKERHUB_PULL_TOKEN != '' && 'true' || 'false' }}



jobs:
  build:
    name: "Build Docker Image (${{ contains(matrix.runner, 'arm') && 'ARM64' || 'AMD64' }})"
    strategy:
      matrix:
        runner:
          - ubuntu-latest
          - ubuntu-24.04-arm
        exclude:
          # skip the ARM integration tests in forks, and also if not on master/upgrade-dependencies and forceARMTests is not set to true
          # TODO ARM runners are not yet available for private repositories; skip them for potential private forks
          - runner: ${{ ((github.repository != 'localstack/localstack') || (github.ref != 'refs/heads/master' && github.ref != 'upgrade-dependencies' && inputs.forceARMTests == false)) && 'ubuntu-24.04-arm' || ''}}
      fail-fast: false
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Determine Runner Architecture
        shell: bash
        run: echo "PLATFORM=${{ (runner.arch == 'X64' && 'amd64') || (runner.arch == 'ARM64' && 'arm64') || '' }}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: localstack
          # setuptools_scm requires the git history (at least until the last tag) to determine the version
          fetch-depth: 0

      - name: Build Image
        uses: localstack/localstack/.github/actions/build-image@master
        with:
          disableCaching: ${{ inputs.disableCaching == true && 'true' || 'false' }}
          dockerhubPullUsername: ${{ secrets.DOCKERHUB_PULL_USERNAME }}
          dockerhubPullToken: ${{ secrets.DOCKERHUB_PULL_TOKEN }}

      - name: Restore Lambda common runtime packages
        id: cached-lambda-common-restore
        if: inputs.disableCaching != true
        uses: actions/cache/restore@v4
        with:
          path: localstack/tests/aws/services/lambda_/functions/common
          key: common-it-${{ runner.os }}-${{ runner.arch }}-lambda-common-${{ hashFiles('localstack/tests/aws/services/lambda_/functions/common/**/src/*', 'localstack/tests/aws/services/lambda_/functions/common/**/Makefile') }}

      - name: Prebuild lambda common packages
        run: ./localstack/scripts/build_common_test_functions.sh `pwd`/localstack/tests/aws/services/lambda_/functions/common

      - name: Save Lambda common runtime packages
        if: inputs.disableCaching != true
        uses: actions/cache/save@v4
        with:
          path: localstack/tests/aws/services/lambda_/functions/common
          key: ${{ steps.cached-lambda-common-restore.outputs.cache-primary-key }}

      - name: Archive Lambda common packages
        uses: actions/upload-artifact@v4
        with:
          name: lambda-common-${{ env.PLATFORM }}
          path: |
            localstack/tests/aws/services/lambda_/functions/common
          retention-days: 1

  test-integration:
    name: "Integration Tests (${{ contains(matrix.runner, 'arm') && 'ARM64' || 'AMD64' }} - ${{ matrix.group }})"
    if: ${{ !inputs.onlyAcceptanceTests }}
    needs:
      - build
    strategy:
      matrix:
        group: [ 1, 2, 3, 4 ]
        runner:
          - ubuntu-latest
          - ubuntu-24.04-arm
        exclude:
          # skip the ARM integration tests in forks, and also if not on master/upgrade-dependencies and forceARMTests is not set to true
          # TODO ARM runners are not yet available for private repositories; skip them for potential private forks
          - runner: ${{ ((github.repository != 'localstack/localstack') || (github.ref != 'refs/heads/master' && github.ref != 'upgrade-dependencies' && inputs.forceARMTests == false)) && 'ubuntu-24.04-arm' || ''}}
      fail-fast: false
    runs-on: ${{ matrix.runner }}
    env:
      # Set job-specific environment variables for pytest-tinybird
      CI_JOB_NAME: ${{ github.job }}-${{ contains(matrix.runner, 'arm') && 'arm' || 'amd' }}
      CI_JOB_ID: ${{ github.job }}-${{ contains(matrix.runner, 'arm') && 'arm' || 'amd' }}
    steps:
      - name: Determine Runner Architecture
        shell: bash
        run: echo "PLATFORM=${{ (runner.arch == 'X64' && 'amd64') || (runner.arch == 'ARM64' && 'arm64') || '' }}" >> $GITHUB_ENV

      - name: Login to Docker Hub
        # login to DockerHub to avoid rate limiting issues on custom runners
        if: github.repository_owner == 'localstack' && env.DOCKER_PULL_SECRET_AVAILABLE == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_PULL_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PULL_TOKEN }}

      - name: Set environment
        if: ${{ inputs.testEnvironmentVariables != ''}}
        shell: bash
        run: |
          echo "${{ inputs.testEnvironmentVariables }}" | sed "s/;/\n/" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4
        with:
          # setuptools_scm requires the git history (at least until the last tag) to determine the version
          fetch-depth: 0

      - name: Download Lambda Common packages
        uses: actions/download-artifact@v4
        with:
          name: lambda-common-${{ env.PLATFORM }}
          path: |
            tests/aws/services/lambda_/functions/common

      - name: Load Localstack Docker Image
        uses: ./.github/actions/load-localstack-docker-from-artifacts
        with:
          platform: "${{ env.PLATFORM }}"

      - name: Download Test Selection
        if: ${{ env.TESTSELECTION_PYTEST_ARGS }}
        uses: actions/download-artifact@v4
        with:
          name: test-selection
          path: dist/testselection/

      - name: Run Integration Tests
        timeout-minutes: 120
        env:
          # add the GitHub API token to avoid rate limit issues
          GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PYTEST_ARGS: "${{ env.TINYBIRD_PYTEST_ARGS }}${{ env.TESTSELECTION_PYTEST_ARGS }} --splits 4 --group ${{ matrix.group }} --store-durations --clean-durations --ignore=tests/unit/ --ignore=tests/bootstrap"
          COVERAGE_FILE: "target/.coverage.integration-${{ env.PLATFORM }}-${{ matrix.group }}"
          JUNIT_REPORTS_FILE: "target/pytest-junit-integration-${{ env.PLATFORM }}-${{ matrix.group }}.xml"
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_PULL_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PULL_TOKEN }}
          # increase Docker SDK timeout to avoid timeouts on BuildJet runners - https://github.com/docker/docker-py/issues/2266
          DOCKER_SDK_DEFAULT_TIMEOUT_SECONDS: 300
        run: make docker-run-tests

      # Test durations are fetched and merged automatically by a separate workflow.
      # Files must have unique names to prevent overwrites when multiple artifacts are downloaded
      - name: Rename test durations file
        run: |
          mv .test_durations .test_durations-${{ env.PLATFORM }}-${{ matrix.group }}

      - name: Archive Test Durations
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: pytest-split-durations-${{ env.PLATFORM }}-${{ matrix.group }}
          path: .test_durations-${{ env.PLATFORM }}-${{ matrix.group }}
          include-hidden-files: true
          retention-days: 5

      - name: List files
        run: |
          ls -R target/

      - name: Archive Test Results
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: test-results-integration-${{ env.PLATFORM }}-${{ matrix.group }}
          include-hidden-files: true
          path: |
            target/pytest-junit-integration-${{ env.PLATFORM }}-${{ matrix.group }}.xml
            target/.coverage.integration-${{ env.PLATFORM }}-${{ matrix.group }}
          retention-days: 30
